<krpano>

	<linkedscene_settings 	               
	               thumbs_width="120" thumbs_height="80" thumbs_linkedscene_padding="10" thumbs_crop=""
	               thumbs_opened="false"
	               thumbs_text="true"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="true"
	               thumbs_scrollindicator="true"
	               tooltips_thumbs="false"
	               controlbar_offset="10"
	               />
	<!-- Skin Styles -->

	<!-- linkedscene_skin_base - the base skin image -->
	<style name="linkedscene_skin_base" url="../skin/vtourskin.png" />

	<!-- linkedscene_skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
	<style name="linkedscene_skin_glow"
	       ondown="copy(skin_lockglow,name); linkedscene_skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); linkedscene_skin_buttonglow(get(name),0.3) ); "
	       onout="if(skin_lockglow === name, ifnot(pressed, linkedscene_skin_buttonglow(null);delete(skin_lockglow); ));"
	       onup="if(hovering, linkedscene_skin_buttonglow(get(name),0.3), linkedscene_skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
	       />

	<!-- linkedscene_skin_linkedscene_thumbtext_style - style/textfield for the (optional, linkedscene_settings.thumbs_text) thumbnails texts -->
	<style name="linkedscene_skin_linkedscene_thumbtext_style" url="../plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:10px;" textshadow="1" />

	<!-- tooltips textstyle -->
	<textstyle name="linkedscene_skin_linkedscene_thumbtext_style" font="Arial" fontsize="16" bold="true" italic="false" background="false" border="false" textcolor="0xFFFFFF" effect="dropshadow(1,45,0x000000,4,1);" fadeintime="0.1" fadetime="0.05" />

	

	
	<layer name="linkedscene_skin_scroll_window" type="container" keep="true" align="center" edge="center" width="100%" height="100%" x="100%" y="0" x_opened="100" x_closed="-2" maskchildren="true">
		<layer name="linkedscene_skin_scroll_layer" type="container" align="lefttop" width="100%" height="100%" x="-100%" y="0" bgborderwidth="2" >						
			<layer name="linkedscene_skin_scroll_container" type="container" bgcolor="0x000000" bgalpha="0.5" align="lefttop" width="100%" height="100%" x="0" y="0" maskchildren="true"> 			
			  <layer name="linkedscene_skin_thumbs_container" type="container" align="lefttop" width="100%" height="100%" visible="false">
					<layer name="linkedscene_skin_thumbs_scrollleft"  style="linkedscene_skin_base|linkedscene_skin_glow" crop="0|64|64|64"  align="righttop"  edge="righttop"  x="55" y="37" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[linkedscene_skin_thumbs].scrollby(0,+1));" visible="false" rotate="90"/>
					<layer name="linkedscene_skin_thumbs_scrollright" style="linkedscene_skin_base|linkedscene_skin_glow" crop="64|64|64|64" align="rightbottom" edge="rightbottom" x="87" y="5" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[linkedscene_skin_thumbs].scrollby(0,-1));" visible="false" rotate="90"/>
					<layer name="linkedscene_skin_thumbs_scrollindicator" type="container" bgcolor="0xf37921" bgalpha="0.35" align="righttop" edge="left" x="0" height="4" visible="true" enabled="false" rotate="90" oy="-3"/>					
					<layer name="linkedscene_skin_thumbs" state="closed" url="../plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" direction="v" align="right" width="100%" height="100%" zorder="1" onloaded="linkedscene_skin_updatescroll();" onscroll="linkedscene_skin_updatethumbscroll();" />
				</layer>				
			 </layer>  
		</layer>		
	</layer>
	
	
	
	<layer name="linkedscene_skin_control_bar" keep="true" type="container" bgcolor="0x000000" bgalpha="0.5" align="lefttop" width="0" height_x="100%" height="100%" x="20" y="0" x_opened="20" x_closed="-40" zorder="3" 		>				
	</layer>
	
	<layer name="linkedscene_skin_buttonglow"   keep="true" style="linkedscene_skin_base" crop="64|384|64|64" align="center" x="0" y="1" alpha="0.0" visible="false" enabled="false" />
	<layer name="linkedscene_skin_thumbborder"  keep="true" url="linkedscene_thumbborder.png" visible="false" enabled="false" align="lefttop" scale="0.5" ox="-2" oy="-2" />

	<!-- Skin Events -->
	<events name="linkedscene_skin_events" keep="true"
	        onxmlcomplete="set(events[linkedscene_skin_events].onxmlcomplete,null); linkedscene_skin_startup();"
	        onnewpano="linkedscene_skin_update_scene_infos();"
	        onremovepano_x="skin_showloading(true);"
	        onloadcomplete_x="skin_showloading(false);"
	        onresize="linkedscene_skin_onresize();"
	        />




	<!-- Skin Actions -->

	<action name="linkedscene_skin_startup">
		if(device.mobile == false,
			copy(layer[linkedscene_skin_control_bar].x, linkedscene_settings.controlbar_offset); 
			copy(layer[linkedscene_skin_control_bar].x_opened, linkedscene_settings.controlbar_offset);
			add(layer[linkedscene_skin_scroll_window].x, layer[linkedscene_skin_control_bar].width, layer[linkedscene_skin_control_bar].x);
			add(layer[linkedscene_skin_scroll_window].x_opened, layer[linkedscene_skin_control_bar].width, layer[linkedscene_skin_control_bar].x_opened);

			if(linkedscene_settings.thumbs_opened, set(layer[linkedscene_skin_thumbs].state,'opened'); set(layer[linkedscene_skin_thumbs_container].visible,true); );

			copy(layer[linkedscene_skin_thumbs].draggable, linkedscene_settings.thumbs_dragging);

			if(linkedscene_settings.thumbs_onhoverscrolling,
				ifnot(device.touchdevice, set(layer[linkedscene_skin_thumbs].draggable, false));
				set(layer[linkedscene_skin_thumbs].onhover_autoscrolling, true);
			  );
		  );


		linkedscene_skin_addthumbs(); 
		linkedscene_skin_onresize();
		linkedscene_skin_updatescroll();

		
		<!--if(device.desktop, set(usegyro, false));
		if(device.flash, set(usegyro, false));
		-->

	</action>

	<action name="linkedscene_skin_addthumbs">

				
		copy(linkedscene_thumbwidth, linkedscene_settings.thumbs_width);
		copy(linkedscene_thumbheight, linkedscene_settings.thumbs_height);
		copy(linkedscene_thumblinkedscene_padding, linkedscene_settings.thumbs_linkedscene_padding);
		copy(linkedscene_thumbcrop, linkedscene_settings.thumbs_crop);


		add(linkedscene_linkedscene_thumbyoffset, linkedscene_thumbheight, linkedscene_thumblinkedscene_padding);
		mul(linkedscene_linkedscene_thumbycenter, linkedscene_linkedscene_thumbyoffset, 0.5);
		mul(linkedscene_thumbbarheight, linkedscene_linkedscene_thumbyoffset, scene.count);
		add(linkedscene_thumbbarheight, linkedscene_thumblinkedscene_padding);
		add(linkedscene_thumbbarwidth, linkedscene_thumblinkedscene_padding, linkedscene_thumbwidth );
		add(linkedscene_thumbbarwidth, linkedscene_thumblinkedscene_padding);

		if (linkedscene_settings.thumbs_scrollindicator,			
			copy(layer[linkedscene_skin_thumbs_scrollindicator].x, linkedscene_thumbbarwidth);
			add(linkedscene_thumbbarwidth, layer[linkedscene_skin_thumbs_scrollindicator].height);
		);

    copy(layer[linkedscene_skin_thumbs].height, linkedscene_thumbbarheight);
		copy(layer[linkedscene_skin_thumbs].width, linkedscene_thumbbarwidth);

		mul(linkedscene_halfheight, linkedscene_thumbbarwidth, 0.5);
		copy(layer[linkedscene_skin_thumbs_scrollup].y, linkedscene_halfheight);
		copy(layer[linkedscene_skin_thumbs_scrolldown].y, linkedscene_halfheight);

		for(set(i,0), i LT scene.count, inc(i),
			txtadd(linkedscene_thumbname,'linkedscene_skin_thumb_',get(i));
			addlayer(get(linkedscene_thumbname));
			copy(layer[get(linkedscene_thumbname)].url, scene[get(i)].thumburl);
			set(layer[get(linkedscene_thumbname)].keep, true);
			set(layer[get(linkedscene_thumbname)].parent, 'linkedscene_skin_thumbs');
			set(layer[get(linkedscene_thumbname)].align, righttop);
			copy(layer[get(linkedscene_thumbname)].crop, linkedscene_thumbcrop);
			copy(layer[get(linkedscene_thumbname)].width, linkedscene_thumbwidth);
			copy(layer[get(linkedscene_thumbname)].height, linkedscene_thumbheight);
			mul(linkedscene_thumbx, i, linkedscene_linkedscene_thumbyoffset);
						
			add(linkedscene_thumbx, linkedscene_thumblinkedscene_padding);
			copy(layer[get(linkedscene_thumbname)].y, linkedscene_thumbx); 
			
			copy(layer[get(linkedscene_thumbname)].x,linkedscene_thumblinkedscene_padding);
						
			add(scene[get(i)].linkedscene_thumbx, linkedscene_thumbx, linkedscene_linkedscene_thumbycenter);
			
			copy(scene[get(i)].linkedscene_thumby, linkedscene_thumblinkedscene_padding);
			set(layer[get(linkedscene_thumbname)].linkedscene, get(scene[get(i)].name) );
			
			
			
			
			<!--Choose what action to call depending on the action that is calling this box addlinedscene, add load new scene autotour point or....-->
			
			set(layer[get(linkedscene_thumbname)].onclick, 
			
				if(originator EQ 'link2scene',						copy(layer[linkedscene_skin_thumbborder].parent, name); add_link2scene_from_linkedscene_chooser(get(linkedscene));  );
				if(originator EQ 'autotour_link',					copy(layer[linkedscene_skin_thumbborder].parent, name); add_autorotate_hotspots_step(call_from_load_scene,get(linkedscene));  );			
				if(originator EQ 'autotour_start_scene',	copy(layer[linkedscene_skin_thumbborder].parent, name); add_autorotate_hotspots_step(autotour_start_scene,get(linkedscene));	);			
				if(originator EQ 'gotoscene',							copy(layer[linkedscene_skin_thumbborder].parent, name); load_new_scene(get(linkedscene)););
			);
			
			
			if(linkedscene_settings.tooltips_thumbs,
				set(layer[get(linkedscene_thumbname)].onhover, showtext(get(scene[get(linkedscene)].title),linkedscene_skin_linkedscene_thumbtext_style); );
			  );
			if(linkedscene_settings.thumbs_text,
				txtadd(linkedscene_thumbtext, 'skin_linkedscene_thumbtext_', get(i));
				addlayer(get(linkedscene_thumbtext));
				layer[get(linkedscene_thumbtext)].loadstyle(linkedscene_skin_linkedscene_thumbtext_style);
				set(layer[get(linkedscene_thumbtext)].keep, true);
				set(layer[get(linkedscene_thumbtext)].parent, get(linkedscene_thumbname));
				set(layer[get(linkedscene_thumbtext)].html, get(scene[get(i)].title));
			  );
		   );
	</action>

	<action name="linkedscene_skin_onresize">
		mul(linkedscene_mh, stagewidth, -1);
		
		if(layer[linkedscene_skin_thumbs].state == 'opened', add(linkedscene_mh,layer[linkedscene_skin_thumbs].width); );
		
		set(layer[linkedscene_skin_scroll_layer].x, get(linkedscene_mh)); 
		
		sub(new_thumb_container_height,stageheight,350);
				
		set(layer[linkedscene_skin_scroll_window].height,400);
				
	</action>

	<action name="linkedscene_skin_updatescroll">
		if(layer[linkedscene_skin_thumbs].loaded,
			
			set(linkedscene_cursceneindex, 0);
			if(xml.scene, copy(linkedscene_cursceneindex, scene[get(xml.scene)].index));			
			layer[linkedscene_skin_thumbs].setcenter(get(scene[get(linkedscene_cursceneindex)].linkedscene_thumbx), get(scene[get(linkedscene_cursceneindex)].linkedscene_thumby)); 
		  );
	</action>

	<action name="linkedscene_skin_updatethumbscroll">

		copy(linkedscene_padding,linkedscene_settings.thumbs_linkedscene_padding);


		if(linkedscene_settings.thumbs_scrollbuttons,

			if(toverflow GT 0, set(layer[linkedscene_skin_thumbs_scrollleft].visible,true),  set(layer[linkedscene_skin_thumbs_scrollleft].visible,false) );
			if(boverflow GT 0, set(layer[linkedscene_skin_thumbs_scrollright].visible,true), set(layer[linkedscene_skin_thumbs_scrollright].visible,false) );
		  );

		if(linkedscene_settings.thumbs_scrollindicator, 
			if(hoverflow GT 0,
				
				set(layer[linkedscene_skin_thumbs_scrollindicator].visible,true);
				sub(linkedscene_iw,pixelheight,hoverflow);
				div(linkedscene_pw,linkedscene_iw,pixelheight);
				div(linkedscene_px,toverflow,hoverflow);
				mul(linkedscene_pw,linkedscene_iw);
				
				
				copy(layer[linkedscene_skin_thumbs_scrollindicator].width,linkedscene_pw);
				sub(linkedscene_iw,linkedscene_pw);
				sub(linkedscene_iw,linkedscene_padding);
				sub(linkedscene_iw,linkedscene_padding);
				mul(linkedscene_px,linkedscene_iw);
				add(linkedscene_px,linkedscene_padding);
				copy(layer[linkedscene_skin_thumbs_scrollindicator].y,linkedscene_px);
			  ,
				set(layer[linkedscene_skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="linkedscene_skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
					
				txtadd(layer[linkedscene_skin_thumbborder].parent, 'linkedscene_skin_thumb_', get(scene[get(xml.scene)].index));
				set(layer[linkedscene_skin_thumbborder].visible, true);
					
			  );
		  );
	</action>


	<action name="linkedscene_skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[linkedscene_skin_buttonglow].parent, %1);
			set(layer[linkedscene_skin_buttonglow].visible, true);
			tween(layer[linkedscene_skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[linkedscene_skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[linkedscene_skin_buttonglow].parent, null); set(layer[linkedscene_skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_hideskin_X">
		if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.4); );
		
		tween(layer[linkedscene_skin_scroll_window].x, get(layer[linkedscene_skin_scroll_window].x_closed), 0.5, easeOutQuint);
		tween(layer[linkedscene_skin_control_bar].x, get(layer[linkedscene_skin_control_bar].x_closed), 0.5, easeOutQuint);
		
	</action>

	<action name="skin_showskin_x">		
		tween(layer[linkedscene_skin_scroll_window].x, get(layer[linkedscene_skin_scroll_window].x_opened), 0.5, easeOutQuint);
		tween(layer[linkedscene_skin_control_bar].x, get(layer[linkedscene_skin_control_bar].x_opened), 0.5, easeOutQuint);
		
	</action>


	<action name="linkedscene_skin_showthumbs">
		
		if(%1 == null, if(layer[linkedscene_skin_thumbs].state == 'closed', set(linkedscene_show,true), set(linkedscene_show,false)); , set(linkedscene_show,%1); );
		mul(linkedscene_mh, layer[linkedscene_skin_scroll_layer].pixelwidth, -1);
		
		
		if(layer[linkedscene_skin_scroll_layer].x == -100%, copy(layer[linkedscene_skin_scroll_layer].x,linkedscene_mh));
		if(linkedscene_show,
			set(layer[linkedscene_skin_thumbs].state, 'opened');
			add(linkedscene_mh, layer[linkedscene_skin_thumbs].width);
		
			tween(layer[linkedscene_skin_scroll_layer].x, get(linkedscene_mh), 0.5, easeOutQuint);
			set(layer[linkedscene_skin_thumbs_container].visible, true);
			tween(layer[linkedscene_skin_thumbs_container].alpha, 1.0, 0.25);
		
		  ,
			set(layer[linkedscene_skin_thumbs].state, 'closed');
			tween(layer[linkedscene_skin_scroll_layer].x, get(linkedscene_mh), 0.5, easeOutQuint, set(layer[linkedscene_skin_thumbs_container].visible, false););
		
		  );
	</action>


</krpano>
